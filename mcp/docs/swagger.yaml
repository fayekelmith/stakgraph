openapi: 3.0.0
info:
  title: Repo2Graph API
  description: API for analyzing and exploring code repositories as graphs
  version: 1.0.0
servers:
  - url: http://localhost:3355
    description: Local development server
paths:
  /nodes:
    get:
      summary: /nodes
      description: Get nodes of a specific type
      parameters:
        - name: node_type
          in: query
          description: Type of node to retrieve
          schema:
            type: string
            enum: [Page, Function, Class, Trait, Datamodel, Request, Endpoint, UnitTest, IntegrationTest, E2etest]
            example: Function
        - name: concise
          in: query
          description: Only include name and file in returned data
          schema:
            type: boolean
            default: false
        - name: ref_ids
          in: query
          description: Comma-separated list of reference IDs
          schema:
            type: string
            example: "123,456,789"
        - name: output
          in: query
          description: Output format
          schema:
            type: string
            enum: [json, snippet]
            default: json
        - name: language
          in: query
          description: Filter by programming language
          schema:
            type: string
            example: typescript
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '500':
          description: Internal server error
  /edges:
    get:
      summary: /edges
      description: Get edges of a specific type
      parameters:
        - name: edge_type
          in: query
          description: Type of edge to retrieve
          schema:
            type: string
            enum: [CALLS, USES, OPERAND, CONTAINS, IMPORTS, OF, HANDLER, RENDERS]
            example: CALLS
        - name: concise
          in: query
          description: Only include name and file in returned data
          schema:
            type: boolean
            default: false
        - name: ref_ids
          in: query
          description: Comma-separated list of reference IDs
          schema:
            type: string
            example: "123,456,789"
        - name: output
          in: query
          description: Output format
          schema:
            type: string
            enum: [json, snippet]
            default: json
        - name: language
          in: query
          description: Filter by programming language
          schema:
            type: string
            example: typescript
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Edge'
        '500':
          description: Internal server error
  /graph:
    get:
      summary: /graph
      description: Get a graph of nodes and edges
      parameters:
        - name: edge_type
          in: query
          description: Type of edge to include
          schema:
            type: string
            enum: [CALLS, USES, OPERAND, CONTAINS, IMPORTS, OF, HANDLER, RENDERS]
            default: CALLS
        - name: concise
          in: query
          description: Only include name and file in returned data
          schema:
            type: boolean
            default: false
        - name: edges
          in: query
          description: Include edges in the response
          schema:
            type: boolean
            default: false
        - name: language
          in: query
          description: Filter by programming language
          schema:
            type: string
            example: typescript
        - name: since
          in: query
          description: Filter nodes added after this date
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Maximum number of nodes to return
          schema:
            type: integer
            default: 100
        - name: limit_mode
          in: query
          description: How to apply the limit
          schema:
            type: string
            enum: [total, per_type]
            default: per_type
        - name: node_types
          in: query
          description: Comma-separated list of node types to include
          schema:
            type: string
            example: "Function,Class,Endpoint"
        - name: ref_ids
          in: query
          description: Comma-separated list of reference IDs
          schema:
            type: string
            example: "123,456,789"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphResponse'
        '500':
          description: Internal server error
  /search:
    get:
      summary: /search
      description: Search for nodes matching a query
      parameters:
        - name: query
          in: query
          required: true
          description: Search query
          schema:
            type: string
            example: "authentication"
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            default: 25
        - name: concise
          in: query
          description: Only include name and file in returned data
          schema:
            type: boolean
            default: false
        - name: node_types
          in: query
          description: Comma-separated list of node types to search
          schema:
            type: string
            example: "Function,Class,Endpoint"
        - name: node_type
          in: query
          description: Single node type to search
          schema:
            type: string
            example: Function
        - name: method
          in: query
          description: Search method to use
          schema:
            type: string
            enum: [fulltext, vector, hybrid]
            default: hybrid
        - name: output
          in: query
          description: Output format
          schema:
            type: string
            enum: [json, snippet]
            default: snippet
        - name: tests
          in: query
          description: Include test nodes in search
          schema:
            type: boolean
            default: true
        - name: max_tokens
          in: query
          description: Maximum tokens to include in results
          schema:
            type: integer
        - name: language
          in: query
          description: Filter by programming language
          schema:
            type: string
            example: typescript
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
  /map:
    get:
      summary: /map
      description: Get a text-based map of node relationships
      parameters:
        - name: node_type
          in: query
          description: Type of node to map
          schema:
            type: string
            enum: [Page, Function, Class, Trait, Datamodel, Request, Endpoint, UnitTest, IntegrationTest, E2etest]
            example: Function
        - name: name
          in: query
          description: Name of the node
          schema:
            type: string
            example: "LeaderboardPage"
        - name: file
          in: query
          description: File path of the node
          schema:
            type: string
            example: "src/pages/Leaderboard.tsx"
        - name: ref_id
          in: query
          description: Reference ID of the node
          schema:
            type: string
            example: "123"
        - name: tests
          in: query
          description: Include test nodes
          schema:
            type: boolean
            default: true
        - name: depth
          in: query
          description: Depth of relationships to include
          schema:
            type: integer
            default: 7
        - name: direction
          in: query
          description: Direction of relationships to include
          schema:
            type: string
            enum: [incoming, outgoing, both]
            default: both
        - name: trim
          in: query
          description: Comma-separated list of node types to trim from results
          schema:
            type: string
            example: "Import,Directory"
      responses:
        '200':
          description: Successful response
          content:
            text/html:
              schema:
                type: string
        '500':
          description: Internal server error
  /repo_map:
    get:
      summary: /repo_map
      description: Get a text-based map of a repository
      parameters:
        - name: name
          in: query
          description: Name of the repository
          schema:
            type: string
            example: "my-repo"
        - name: ref_id
          in: query
          description: Reference ID of the repository
          schema:
            type: string
            example: "123"
        - name: node_type
          in: query
          description: Type of node to map
          schema:
            type: string
            default: Repository
        - name: include_functions_and_classes
          in: query
          description: Include functions and classes in the map
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successful response
          content:
            text/html:
              schema:
                type: string
        '500':
          description: Internal server error
  /code:
    get:
      summary: /code
      description: Get code for a specific node
      parameters:
        - name: node_type
          in: query
          description: Type of node
          schema:
            type: string
            enum: [Page, Function, Class, Trait, Datamodel, Request, Endpoint, UnitTest, IntegrationTest, E2etest]
            example: Function
        - name: name
          in: query
          description: Name of the node
          schema:
            type: string
            example: "authenticateUser"
        - name: file
          in: query
          description: File path of the node
          schema:
            type: string
            example: "src/auth/auth.service.ts"
        - name: ref_id
          in: query
          description: Reference ID of the node
          schema:
            type: string
            example: "123"
        - name: tests
          in: query
          description: Include test nodes
          schema:
            type: boolean
            default: true
        - name: depth
          in: query
          description: Depth of relationships to include
          schema:
            type: integer
            default: 7
        - name: direction
          in: query
          description: Direction of relationships to include
          schema:
            type: string
            enum: [incoming, outgoing, both]
            default: both
        - name: trim
          in: query
          description: Comma-separated list of node types to trim from results
          schema:
            type: string
            example: "Import,Directory"
      responses:
        '200':
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
  /shortest_path:
    get:
      summary: /shortest_path
      description: Find the shortest path between two nodes
      parameters:
        - name: start_node_key
          in: query
          description: Node key of the starting node
          schema:
            type: string
        - name: end_node_key
          in: query
          description: Node key of the ending node
          schema:
            type: string
        - name: start_ref_id
          in: query
          description: Reference ID of the starting node
          schema:
            type: string
        - name: end_ref_id
          in: query
          description: Reference ID of the ending node
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
  /rules_files:
    get:
      summary: /rules_files
      description: Get rules files from the repository
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '500':
          description: Internal server error
  /services:
    get:
      summary: /services
      description: Get services configuration
      parameters:
        - name: clone
          in: query
          description: Clone repository to analyze
          schema:
            type: boolean
            default: false
        - name: repo_url
          in: query
          description: URL of repository to clone
          schema:
            type: string
            example: "https://github.com/username/repo.git"
        - name: username
          in: query
          description: Username for repository authentication
          schema:
            type: string
        - name: pat
          in: query
          description: Personal access token for repository authentication
          schema:
            type: string
        - name: commit
          in: query
          description: Commit hash to checkout
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  services:
                    type: array
                    items:
                      $ref: '#/components/schemas/Service'
                  containers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Container'
        '500':
          description: Internal server error
  /explore:
    get:
      summary: /explore
      description: Explore the codebase with a prompt
      parameters:
        - name: prompt
          in: query
          required: true
          description: Exploration prompt
          schema:
            type: string
            example: "How does authentication work?"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
        '400':
          description: Missing prompt
        '500':
          description: Internal server error
  /understand:
    get:
      summary: /understand
      description: Get understanding of the codebase
      parameters:
        - name: question
          in: query
          required: true
          description: Question about the codebase
          schema:
            type: string
            example: "How does the authentication flow work?"
        - name: threshold
          in: query
          description: Similarity threshold
          schema:
            type: number
            default: 0.88
        - name: provider
          in: query
          description: AI provider to use
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Missing question
        '500':
          description: Internal server error
  /seed_understanding:
    post:
      summary: /seed_understanding
      description: Seed understanding of the codebase
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '500':
          description: Internal server error
  /ask:
    get:
      summary: /ask
      description: Ask a question about the codebase
      parameters:
        - name: question
          in: query
          required: true
          description: Question to ask
          schema:
            type: string
            example: "How does the authentication flow work?"
        - name: threshold
          in: query
          description: Similarity threshold
          schema:
            type: number
        - name: provider
          in: query
          description: AI provider to use
          schema:
            type: string
        - name: maxAgeHours
          in: query
          description: Maximum age of cached results in hours
          schema:
            type: number
        - name: forceRefresh
          in: query
          description: Force refresh of cached results
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Missing question
        '500':
          description: Internal server error
  /learnings:
    get:
      summary: /learnings
      description: Get learnings about the codebase
      parameters:
        - name: question
          in: query
          description: Question to find relevant learnings
          schema:
            type: string
            example: "What are the core user stories in this project?"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  prompts:
                    type: array
                    items:
                      type: object
                  hints:
                    type: array
                    items:
                      type: object
        '500':
          description: Internal server error
  /hint_siblings:
    post:
      summary: /hint_siblings
      description: Generate sibling hints
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  processed:
                    type: integer
        '500':
          description: Internal server error
  /learn:
    get:
      summary: /learn
      description: Learn about the codebase
      responses:
        '200':
          description: Successful response
          content:
            text/html:
              schema:
                type: string
        '401':
          description: Authentication required
  /seed_stories:
    post:
      summary: /seed_stories
      description: Seed user stories
      parameters:
        - name: prompt
          in: query
          description: Prompt for generating stories
          schema:
            type: string
            example: "How does this repository work? Please provide a summary of the codebase, a few key files, and 50 core user stories."
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '500':
          description: Internal server error
  /services_agent:
    get:
      summary: /services_agent
      description: Get services configuration using GitSee agent
      parameters:
        - name: owner
          in: query
          required: true
          description: Repository owner
          schema:
            type: string
            example: "stakwork"
        - name: repo
          in: query
          required: true
          description: Repository name
          schema:
            type: string
            example: "hive"
        - name: username
          in: query
          description: Username for repository authentication
          schema:
            type: string
        - name: pat
          in: query
          description: Personal access token for repository authentication
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  request_id:
                    type: string
                  status:
                    type: string
        '400':
          description: Missing required parameters
        '500':
          description: Internal server error
  /agent:
    get:
      summary: /agent
      description: Run GitSee agent on a repository
      parameters:
        - name: owner
          in: query
          required: true
          description: Repository owner
          schema:
            type: string
            example: "stakwork"
        - name: repo
          in: query
          required: true
          description: Repository name
          schema:
            type: string
            example: "hive"
        - name: prompt
          in: query
          required: true
          description: Prompt for the agent
          schema:
            type: string
            example: "How do I set up this repo?"
        - name: system
          in: query
          description: System prompt for the agent
          schema:
            type: string
        - name: final_answer
          in: query
          description: Final answer description
          schema:
            type: string
        - name: username
          in: query
          description: Username for repository authentication
          schema:
            type: string
        - name: pat
          in: query
          description: Personal access token for repository authentication
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  request_id:
                    type: string
                  status:
                    type: string
        '400':
          description: Missing required parameters
        '500':
          description: Internal server error
  /gitsee:
    post:
      summary: /gitsee
      description: Run GitSee API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        '405':
          description: Method not allowed
        '500':
          description: Internal server error
  /gitsee/events/{owner}/{repo}:
    get:
      summary: /gitsee/events/{owner}/{repo}
      description: GitSee events stream
      parameters:
        - name: owner
          in: path
          required: true
          description: Repository owner
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: Repository name
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            text/event-stream:
              schema:
                type: string
        '400':
          description: Missing required parameters
        '405':
          description: Method not allowed
        '500':
          description: Internal server error
  /progress:
    get:
      summary: /progress
      description: Check progress of an asynchronous request
      parameters:
        - name: request_id
          in: query
          required: true
          description: Request ID
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Missing request_id
        '404':
          description: Request not found
        '500':
          description: Internal server error
  /leaks:
    get:
      summary: /leaks
      description: Check for security leaks in a repository
      parameters:
        - name: repo_url
          in: query
          required: true
          description: URL of repository to check
          schema:
            type: string
            example: "https://github.com/username/repo.git"
        - name: username
          in: query
          description: Username for repository authentication
          schema:
            type: string
        - name: pat
          in: query
          description: Personal access token for repository authentication
          schema:
            type: string
        - name: commit
          in: query
          description: Commit hash to checkout
          schema:
            type: string
        - name: ignore
          in: query
          description: Comma-separated list of directories to ignore
          schema:
            type: string
            example: "node_modules,dist"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  detect:
                    type: object
                  protect:
                    type: object
        '500':
          description: Internal server error
  /repo/agent:
    post:
      summary: /repo/agent
      description: Run agent on a repository
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - repo_url
                - prompt
              properties:
                repo_url:
                  type: string
                  description: URL of repository
                  example: "https://github.com/username/repo.git"
                username:
                  type: string
                  description: Username for repository authentication
                pat:
                  type: string
                  description: Personal access token for repository authentication
                commit:
                  type: string
                  description: Commit hash to checkout
                branch:
                  type: string
                  description: Branch to checkout
                prompt:
                  type: string
                  description: Prompt for the agent
                  example: "How does authentication work in this repo?"
                toolsConfig:
                  type: object
                  description: Configuration for tools
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  final_answer:
                    type: string
        '400':
          description: Missing required parameters
        '500':
          description: Internal server error
  /_cache/info:
    get:
      summary: /_cache/info
      description: Get cache information
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
  /_cache/clear:
    post:
      summary: /_cache/clear
      description: Clear cache
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
components:
  schemas:
    Node:
      type: object
      properties:
        node_type:
          type: string
          enum: [Repository, Language, Directory, File, Import, Class, Trait, Library, Function, UnitTest, IntegrationTest, E2etest, Endpoint, Request, Datamodel, Page, Var, Message, Person, Video, Hint, Prompt]
        ref_id:
          type: string
        properties:
          type: object
          properties:
            name:
              type: string
            file:
              type: string
            body:
              type: string
            start:
              type: integer
            end:
              type: integer
            docs:
              type: string
            hash:
              type: string
            verb:
              type: string
            date_added_to_graph:
              type: string
    Edge:
      type: object
      properties:
        edge_type:
          type: string
          enum: [CALLS, USES, OPERAND, CONTAINS, IMPORTS, OF, HANDLER, RENDERS]
        ref_id:
          type: string
        source:
          type: string
        target:
          type: string
        properties:
          type: object
    GraphResponse:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/Edge'
        status:
          type: string
        meta:
          type: object
    Service:
      type: object
      properties:
        name:
          type: string
        language:
          type: string
        dev:
          type: boolean
        scripts:
          type: object
          additionalProperties:
            type: string
        env:
          type: object
          additionalProperties:
            type: string
    Container:
      type: object
      properties:
        name:
          type: string
        config:
          type: string